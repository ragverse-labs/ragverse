# ---- Base Node ----
# Use a base image with Node.js
FROM node:19-alpine AS base
# You can change the version according to your needs

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json (if available) to the working directory
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the app's source code to the working directory
COPY . .

# Expose the port that the app will run on
EXPOSE 3000

# Start the app
CMD ["npm", "run", "start"]
    
    
# # ---- Base Node ----
#     FROM node:19-alpine AS base
#     WORKDIR /app
#     COPY package*.json ./
    
#     # Install dependencies
#     RUN npm ci
    
#     # Expose the port the app will run on
#     EXPOSE 3000
    
#     # Start the application
#     CMD ["npm", "run", "dev"]
    

# # ---- Stage 1: Build the app ----
#     FROM node:19-alpine AS build

#     # Set the working directory inside the container
#     WORKDIR /app
    
#     # Copy package.json and package-lock.json to leverage Docker caching
#     COPY package*.json ./
    
#     # Install dependencies
#     RUN npm ci
    
#     # Copy the rest of the source code
#     COPY . .
    
#     # Build the Next.js app
#     RUN npm run build
    
#     # ---- Stage 2: Create a lightweight runtime image ----
#     FROM node:19-alpine AS runtime
    
#     # Set the working directory in the new image
#     WORKDIR /app
    
#     # Install only production dependencies
#     COPY package*.json ./
#     RUN npm install 
    
#     # Copy the built app and necessary files from the build stage
#     COPY --from=build /app/.next .next
#     COPY --from=build /app/public ./public
#     COPY --from=build /app/node_modules ./node_modules
#     COPY --from=build /app/package.json ./package.json
#     # COPY ./next-i18next.config.js ./next-i18next.config.js
#     # Ensure next-i18next.config.js is included
#     COPY ./next-i18next.config.js ./next-i18next.config.js
#     # Expose the port that the app will run on
#     EXPOSE 3000
    
#     # Start the app
#     CMD ["npm", "run", "start"]
    
    
# # ---- Base Node ----
# # Use a base image with Node.js
# FROM node:19-alpine AS base
# # You can change the version according to your needs

# # Set the working directory in the container
# WORKDIR /

# # Copy package.json and package-lock.json (if available) to the working directory
# COPY package*.json ./

# # Install dependencies
# RUN npm install
# COPY . .

# RUN npm run build
# # Copy the rest of the app's source code to the working directory


# # Expose the port that the app will run on
# EXPOSE 3000

# # Start the app
# CMD ["npm", "run", "start"]
    
    
# # ---- Base Node ----
#     FROM node:19-alpine AS base
#     WORKDIR /app
#     COPY package*.json ./
    
#     # Install dependencies
#     RUN npm ci
    
#     # Expose the port the app will run on
#     EXPOSE 3000
    
#     # Start the application
#     CMD ["npm", "run", "dev"]
    