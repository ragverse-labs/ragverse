version: '3.8'

x-ccache: &ccache
  CCACHE_COMPILERCHECK: content
  CCACHE_COMPRESS: 1
  CCACHE_COMPRESSLEVEL: 5
  CCACHE_MAXSIZE: 2G
  CCACHE_DIR: /ccache

services:

  traefik:
      image: traefik:v2.5
      command:
        # Try to enable this if something isn't working. 
        # Chances are, Traefik will tell you why.
        # Be careful in production as it exposes the traffic you might not want to expose.
        # - --log.level=DEBUG

        - --entrypoints.http.address=:80
        - --entrypoints.https.address=:443

        - --providers.docker=true

        # - --api=true

        # LetsEncrypt Staging Server - uncomment when testing
        - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory

        - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
        - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http
        - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
        - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      labels:
        # Redirect all HTTP traffic to HTTPS
        - traefik.http.routers.to-https.rule=HostRegexp(`{host:.+}`)
        - traefik.http.routers.to-https.entrypoints=http
        - traefik.http.routers.to-https.middlewares=to-https

        - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
        - traefik.http.routers.traefik.entrypoints=https
        - traefik.http.routers.traefik.middlewares=auth
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.tls=true
        - traefik.http.routers.traefik.tls.certresolver=${CERT_RESOLVER}

        - traefik.http.middlewares.to-https.redirectscheme.scheme=https
        - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}
      ports:
        - 80:80
        - 443:443
      volumes:
        - ./data/letsencrypt:/letsencrypt
        - /var/run/docker.sock:/var/run/docker.sock:ro
      networks:
      - traefik-public

  # reverse-proxy:
  #   image: traefik:v2.5
  #   container_name: traefik
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   ports:
  #     # Web
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     # Map the static configuration into the container
  #     - ./config/static.yml:/etc/traefik/traefik.yml:ro
  #     # Map the dynamic configuration into the container
  #     - ./config/dynamic.yml:/etc/traefik/dynamic.yml:ro
  #     # Map the certificats into the container
  #     - ./certs:/etc/certs:ro
  #   networks:
  #     - traefik-public

  queue:
    image: rabbitmq:3
    volumes:
      # - ./conf/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - rabbitmg-data:/etc/rabbitmq/rabbitmq.conf
      # - ./data/rabbitmq:/var/lib/rabbitmq 
    networks:
      - default

  flower:
      image: mher/flower:0.9.7
      expose:
        - "5555"
      networks:
        - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - default
      command: "--broker=amqp://guest@queue:5672//"
      deploy:
        labels:
          - traefik.enable=true
          - traefik.http.routers.flower.rule=Host(`localhost`)
          - traefik.http.routers.flower.entrypoints=websecure
          - traefik.http.routers.flower.tls=true
          - traefik.http.services.flower.loadbalancer.server.port=5555


  backend:
      image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
      logging:
        driver: "json-file"
        options:
          max-size: "200k"
          max-file: "3"
      env_file:
        - .env
      # ports:
      #   - "8000:8000"
      expose:
        - "8000"
      volumes:
        - ./backend/app/app:/app/app  # Mount the local app directory to /app/app in the container
      environment:
        - SERVER_NAME=${DOMAIN?Variable not set}
        - SERVER_HOST=https://${DOMAIN?Variable not set}
        - SMTP_HOST=${SMTP_HOST}
      build:
        context: ./backend
        dockerfile: backend.dockerfile
        args:
          BACKEND_APP_MODULE: ${BACKEND_APP_MODULE-app.main:app}
          BACKEND_PRE_START_PATH: ${BACKEND_PRE_START_PATH-/app/prestart.sh}
          BACKEND_PROCESS_MANAGER: ${BACKEND_PROCESS_MANAGER-uvicorn}
          BACKEND_WITH_RELOAD: ${BACKEND_WITH_RELOAD-false}
          INSTALL_DEV: ${INSTALL_DEV-false}
      networks:
        - traefik-public
        - default
      deploy:
        labels:
            - "traefik.enable=true"
            # Define the network that should be used
            - "traefik.docker.network=traefik-public"
            # URL to reach this container
            # - "traefik.http.routers.backend.rule=Host(`backend.docker.localhost`)"
            - "traefik.http.routers.backend.rule=Host(`backend.docker.localhost`) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))"
            # Activation of TLS
            - "traefik.http.routers.backend.tls=true"


  celeryworker:
    image: "${DOCKER_IMAGE_CELERYWORKER?Variable not set}:${TAG-latest}"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "3"
    env_file:
      - .env
    expose:
      - "5555"
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      - SMTP_HOST=${SMTP_HOST?Variable not set}
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    networks:
      - default
      - traefik-public

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}"
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.local
    volumes:
      - ./frontend:/app  # Mounts the local frontend directory to /app in the container
      - /app/node_modules  # Prevents overwriting node_modules in the container
      # - ./frontend/node_modules:/app/node_modules 
    # command: npm run dev  # Use the dev command to start the development server
    networks:
      - traefik-public
      - default
    # deploy:
    labels:
        - traefik.http.routers.https.rule=Host(`${DOMAIN}`)
        - traefik.http.routers.https.entrypoints=http
        # - traefik.http.routers.https.tls=true
        # - traefik.http.routers.https.tls.certresolver=${CERT_RESOLVER}
          # # Enable this container to be mapped by traefik
        # # For more information, see: https://docs.traefik.io/providers/docker/#exposedbydefault
        # - "traefik.enable=true"
        # # Define the network that should be used
        # - "traefik.docker.network=traefik-public"
        # # URL to reach this container
        # - "traefik.http.routers.frontend.rule=Host(`frontend.docker.localhost`)"
        # # Activation of TLS
        # - "traefik.http.routers.frontend.tls=true"
        # # - "traefik.http.routers.frontend.entrypoints=websecure"


  mongodb:
    image: mongo:5.0
    restart: always
    expose:
        - "27017"  # Only expose MongoDB within the internal Docker network
    volumes:
      - mongodb-configdb:/data/configdb
      - mongodb-data:/data/db
    env_file:
      - ./frontend/.env.local
    networks:
      - traefik-public
      - default

  # mongo-express:
  #   image: mongo-express:latest
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     ME_CONFIG_MONGODB_SERVER: mongodb
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - default

  redis:
    image: redis:latest
    expose:
    - "6379"  # Only expose Redis within Docker network
    # ports:
    #   - "6379:6379"
    volumes:
       - redis-data:/data
      # - ./data/redis:/data  # Bind mount to persist data to a specific host directory
    networks:
      - default

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
       - ./volumes/etcd:/etcd
      # - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - default
      - milvus

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2022-10-24T18-35-07Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./volumes/minio:/minio_data
      # - milvus-minio-data:/minio_data
    # volumes:
    #   - ./data/minio:/minio_data  # Bind mount to persist data to a specific host directory
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - default
      - milvus

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.20
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - default
      - milvus

volumes:
  mongodb-data:
    name: our-vedas-mongodb-data
  mongodb-configdb:
    name: our-vedas-mongodb-configdb
  mongo_data:
    external: true
  app-db-data:
  milvus_data:
  milvus:
  milvus-minio-data:
  rabbitmg-data:
  etcd-data:
  redis-data:

networks:
  default:
    driver: bridge
  traefik-public:
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
  milvus:
    driver: bridge
