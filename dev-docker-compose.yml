
x-ccache: &ccache
  CCACHE_COMPILERCHECK: content
  CCACHE_COMPRESS: 1
  CCACHE_COMPRESSLEVEL: 5
  CCACHE_MAXSIZE: 2G
  CCACHE_DIR: /ccache

services:
  # traefik:
  #   image: traefik:v2.5
  #   container_name: traefik
  #   restart: unless-stopped
  #   command:
  #     - --entrypoints.web.address=:80
  #     - --entrypoints.websecure.address=:443
  #     - --providers.docker
  #     - --providers.docker.exposedByDefault=false
  #     - --certificatesresolvers.le.acme.email=${TRAEFIK_SSLEMAIL?Variable not set}
  #     - --certificatesresolvers.le.acme.storage=./le/acme.json
  #     - --certificatesresolvers.le.acme.httpchallenge=true
  #     - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
  #     - --log.level=WARN         # Enable debug mode
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     - "./le:/le"
  #   networks:
  #     - traefik-public
  #     - default
  # indic-translator:
  #   image: indic-translator
  #   container_name: indic-translator
  #   environment:
  #     - BACKEND_WORKERS=2  # Environment variable
  #     - PORT=8010
  #   ports:
  #     - "8010:8010"
  #   networks:
  #     # - traefik-public
  #     - default

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}"
    container_name: ragv_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app  # Mount the local frontend directory
      - /app/node_modules  # Prevent overriding the node_modules in the container
    ports:
      - "3000:3000"  # Expose frontend port to host
    environment:
      - OPENAI_API_HOST=http://backend:8000/v1
      - NEXT_PUBLIC_API_URL=http://backend:8000/v1
    env_file:
      - ./frontend/.env.local
    command: ["npm", "run", "dev"]  # Override the CMD from the Dockerfile to run `npm run dev`
    networks:
      - default
    # labels:
    #   - "traefik.enable=true"
    #   # - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)"
    #   - "traefik.http.routers.frontend.rule=!(PathPrefix(`/v1`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))"
    #   - "traefik.http.routers.frontend.entrypoints=websecure"
    #   - "traefik.http.routers.frontend.tls=true"
    #   - "traefik.http.routers.frontend.tls.certresolver=le"
    #   - "traefik.http.routers.frontend.priority=1"  
    #   - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  queue:
    image: rabbitmq:3
    logging:
      driver: "json-file"
      options:
        max-size: "1k"
        max-file: "3"
    volumes:
      - rabbitmg-data:/etc/rabbitmq/rabbitmq.conf
    networks:
       - default
      # - traefik-public

  flower:
    image: mher/flower:0.9.7
    logging:
      driver: "json-file"
      options:
        max-size: "2k"
        max-file: "3"
    networks:
      - default
      # - traefik-public
    command: "--broker=amqp://guest@queue:5672//"
    # deploy:
    #   labels:
    #     - traefik.enable=true
    #     - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
    #     - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
    #     - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
    #     - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
    #     - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
    #     - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.rule=Host(`api.${DOMAIN?Variable not set}`)
    #     - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.entrypoints=https
    #     - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls=true
    #     - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls.certresolver=le
    #     - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    container_name: ragv_backend
    logging:
      driver: "json-file"
      options:
        max-size: "1k"
        max-file: "3"
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - BACKEND_APP_MODULE=${BACKEND_APP_MODULE-app.main:app}
      - BACKEND_PRE_START_PATH=${BACKEND_PRE_START_PATH-/app/prestart.sh}
      - BACKEND_WITH_RELOAD=${BACKEND_WITH_RELOAD-false}
      - PORT=8000
      - USE_FLASH_ATTN="false"
      - DEVICE="${DEVICE:-cpu}"                    
      - BATCH_SIZE="${BATCH_SIZE:-4}"              
      - QUANTIZATION="${QUANTIZATION:-4-bit}"      
      - ATTN_IMPLEMENTATION="${ATTN_IMPLEMENTATION:-eager}"
      - TRANSLATION_SERVICE_URL=http://192.168.0.136:8000/v1/translate/translate
      - HF_HOME=/app/models/hf_models
    # volumes:
    #   - ./app/app/api:/app/app/api
    # volumes:
    #   - ./backend/app:/app  # Mount the local backend directory
    volumes:
      - ./backend/app/app:/app/app

    ports:
      - "8000:8000"  # Expose backend port to host
    # environment:
    #   - SERVER_NAME=${DOMAIN?Variable not set}
    #   - SERVER_HOST=https://${DOMAIN?Variable not set}
    #   - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
          BACKEND_APP_MODULE: ${BACKEND_APP_MODULE-app.main:app}
          BACKEND_PRE_START_PATH: ${BACKEND_PRE_START_PATH-/app/prestart.sh}
          BACKEND_PROCESS_MANAGER: ${BACKEND_PROCESS_MANAGER-uvicorn}
          BACKEND_WITH_RELOAD: ${BACKEND_WITH_RELOAD-false}
          INSTALL_DEV: ${INSTALL_DEV-false}
    networks:
      # - traefik-public
      - default
    # labels:
    #     - "traefik.enable=true"
    #     - "traefik.http.routers.backend-internal.rule=Host(`backend`) && (PathPrefix(`/v1`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))"
    #     # - "traefik.http.services.backend.loadbalancer.server.port=8000"
    #     - "traefik.http.routers.backend-internal.entrypoints=web" # HTTP port for internal usage
    #     - "traefik.http.routers.backend-external.rule=Host(`yourdomain.in`) && (PathPrefix(`/v1`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))"
    #     - "traefik.http.routers.backend-external.entrypoints=websecure"
    #     - "traefik.http.routers.backend-external.tls=true"
    #     - "traefik.http.routers.backend-external.tls.certresolver=le"
    #     - "traefik.http.services.backend.loadbalancer.server.port=8000"

  celeryworker:
    image: "${DOCKER_IMAGE_CELERYWORKER?Variable not set}:${TAG-latest}"
    logging:
      driver: "json-file"
      options:
        max-size: "2k"
        max-file: "3"
    env_file:
      - .env
    expose:
      - "5555"
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      - SMTP_HOST=${SMTP_HOST?Variable not set}
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    networks:
      # - traefik-public
      - default

  mongodb:
    image: mongo:5.0
    container_name: ragv_mongo
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "2k"
        max-file: "3"
    volumes:
      - mongodb-configdb:/data/configdb
      - mongodb-data:/data/db
    env_file:
      - ./frontend/.env.local
    environment:
      MONGO_INITDB_ROOT_USERNAME: yourmongouser       # Root username
      MONGO_INITDB_ROOT_PASSWORD: yourmongopassword    # Root password
      MONGO_INITDB_DATABASE: ragverse
    networks:
      - default
      # - traefik-public

  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: yourmongouser
      ME_CONFIG_MONGODB_ADMINPASSWORD: yourmongopassword
      ME_CONFIG_BASICAUTH_USERNAME: rag_admin_user  # New username
      ME_CONFIG_BASICAUTH_PASSWORD: rag_admin_password  # New password
    depends_on:
      - mongodb
    networks:
      - default

  redis:
    image: redis:latest
    container_name: ragv_redis-1
    logging:
      driver: "json-file"
      options:
        max-size: "2k"
        max-file: "3"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      # - traefik-public
      - default

  etcd:
    container_name: ragv_milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    logging:
      driver: "json-file"
      options:
        max-size: "2k"
        max-file: "3"
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
    #  - traefik-public
     - default

  minio:
    container_name: ragv_milvus-minio
    logging:
      driver: "json-file"
      options:
        max-size: "2k"
        max-file: "3"
    image: minio/minio:RELEASE.2022-10-24T18-35-07Z
    environment:
      MINIO_ACCESS_KEY: minioadminuser
      MINIO_SECRET_KEY: minioadminkey
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      # - traefik-public
      - default

  standalone:
    container_name: ragv_milvus-standalone
    logging:
      driver: "json-file"
      options:
        max-size: "2k"
        max-file: "3"
    image: milvusdb/milvus:v2.3.20
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      # - traefik-public
      - default

  # ollama:
  #     image: ollama/ollama
  #     container_name: ollama
  #     ports:
  #       - "11434:11434"  # Exposes Ollama's REST API
  #     volumes:
  #       - ollama-data:/root/.ollama  # Persistent model cache
  #     restart: always

volumes:
  mongodb-data:
    name: ragv_mongodb-data
  mongodb-configdb:
    name: ragv_mongodb-configdb
  rabbitmg-data:
    name: ragv_rabbitmg-data
  redis-data:
    name: ragv_redis-data
  ollama-data:

networks:
  # traefik-public:
  #   external: true
  default:
    driver: bridge

